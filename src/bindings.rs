/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
	#[allow(unused_imports)]
	use self::super::root;
	pub const YGUndefined: ::std::os::raw::c_double = 1000000000000000000000.0;
	pub const YGAlignCount: u32 = 8;
	pub const YGDimensionCount: u32 = 2;
	pub const YGDirectionCount: u32 = 3;
	pub const YGDisplayCount: u32 = 2;
	pub const YGEdgeCount: u32 = 9;
	pub const YGExperimentalFeatureCount: u32 = 1;
	pub const YGFlexDirectionCount: u32 = 4;
	pub const YGJustifyCount: u32 = 6;
	pub const YGLogLevelCount: u32 = 6;
	pub const YGMeasureModeCount: u32 = 3;
	pub const YGNodeTypeCount: u32 = 2;
	pub const YGOverflowCount: u32 = 3;
	pub const YGPositionTypeCount: u32 = 2;
	pub const YGPrintOptionsCount: u32 = 3;
	pub const YGUnitCount: u32 = 4;
	pub const YGWrapCount: u32 = 3;
	pub type __int32_t = ::std::os::raw::c_int;
	pub type __uint32_t = ::std::os::raw::c_uint;
	pub type va_list = root::__builtin_va_list;
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGAlign {
		YGAlignAuto = 0,
		YGAlignFlexStart = 1,
		YGAlignCenter = 2,
		YGAlignFlexEnd = 3,
		YGAlignStretch = 4,
		YGAlignBaseline = 5,
		YGAlignSpaceBetween = 6,
		YGAlignSpaceAround = 7,
	}
	extern "C" {
		pub fn YGAlignToString(value: root::YGAlign) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGDimension {
		YGDimensionWidth = 0,
		YGDimensionHeight = 1,
	}
	extern "C" {
		pub fn YGDimensionToString(value: root::YGDimension) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGDirection {
		YGDirectionInherit = 0,
		YGDirectionLTR = 1,
		YGDirectionRTL = 2,
	}
	extern "C" {
		pub fn YGDirectionToString(value: root::YGDirection) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGDisplay {
		YGDisplayFlex = 0,
		YGDisplayNone = 1,
	}
	extern "C" {
		pub fn YGDisplayToString(value: root::YGDisplay) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGEdge {
		YGEdgeLeft = 0,
		YGEdgeTop = 1,
		YGEdgeRight = 2,
		YGEdgeBottom = 3,
		YGEdgeStart = 4,
		YGEdgeEnd = 5,
		YGEdgeHorizontal = 6,
		YGEdgeVertical = 7,
		YGEdgeAll = 8,
	}
	extern "C" {
		pub fn YGEdgeToString(value: root::YGEdge) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGExperimentalFeature {
		YGExperimentalFeatureWebFlexBasis = 0,
	}
	extern "C" {
		pub fn YGExperimentalFeatureToString(
			value: root::YGExperimentalFeature,
		) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGFlexDirection {
		YGFlexDirectionColumn = 0,
		YGFlexDirectionColumnReverse = 1,
		YGFlexDirectionRow = 2,
		YGFlexDirectionRowReverse = 3,
	}
	extern "C" {
		pub fn YGFlexDirectionToString(
			value: root::YGFlexDirection,
		) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGJustify {
		YGJustifyFlexStart = 0,
		YGJustifyCenter = 1,
		YGJustifyFlexEnd = 2,
		YGJustifySpaceBetween = 3,
		YGJustifySpaceAround = 4,
		YGJustifySpaceEvenly = 5,
	}
	extern "C" {
		pub fn YGJustifyToString(value: root::YGJustify) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGLogLevel {
		YGLogLevelError = 0,
		YGLogLevelWarn = 1,
		YGLogLevelInfo = 2,
		YGLogLevelDebug = 3,
		YGLogLevelVerbose = 4,
		YGLogLevelFatal = 5,
	}
	extern "C" {
		pub fn YGLogLevelToString(value: root::YGLogLevel) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGMeasureMode {
		YGMeasureModeUndefined = 0,
		YGMeasureModeExactly = 1,
		YGMeasureModeAtMost = 2,
	}
	extern "C" {
		pub fn YGMeasureModeToString(value: root::YGMeasureMode) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGNodeType {
		YGNodeTypeDefault = 0,
		YGNodeTypeText = 1,
	}
	extern "C" {
		pub fn YGNodeTypeToString(value: root::YGNodeType) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGOverflow {
		YGOverflowVisible = 0,
		YGOverflowHidden = 1,
		YGOverflowScroll = 2,
	}
	extern "C" {
		pub fn YGOverflowToString(value: root::YGOverflow) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGPositionType {
		YGPositionTypeRelative = 0,
		YGPositionTypeAbsolute = 1,
	}
	extern "C" {
		pub fn YGPositionTypeToString(value: root::YGPositionType)
			-> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGPrintOptions {
		YGPrintOptionsLayout = 1,
		YGPrintOptionsStyle = 2,
		YGPrintOptionsChildren = 4,
	}
	extern "C" {
		pub fn YGPrintOptionsToString(value: root::YGPrintOptions)
			-> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGUnit {
		YGUnitUndefined = 0,
		YGUnitPoint = 1,
		YGUnitPercent = 2,
		YGUnitAuto = 3,
	}
	extern "C" {
		pub fn YGUnitToString(value: root::YGUnit) -> *const ::std::os::raw::c_char;
	}
	#[repr(u32)]
	#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
	pub enum YGWrap {
		YGWrapNoWrap = 0,
		YGWrapWrap = 1,
		YGWrapWrapReverse = 2,
	}
	extern "C" {
		pub fn YGWrapToString(value: root::YGWrap) -> *const ::std::os::raw::c_char;
	}
	#[repr(C)]
	#[derive(Debug, Copy, Clone)]
	pub struct YGSize {
		pub width: ::std::os::raw::c_float,
		pub height: ::std::os::raw::c_float,
	}
	#[repr(C)]
	#[derive(Debug, Copy, Clone)]
	pub struct YGValue {
		pub value: ::std::os::raw::c_float,
		pub unit: root::YGUnit,
	}
	extern "C" {
		pub static YGValueUndefined: root::YGValue;
	}
	extern "C" {
		pub static YGValueAuto: root::YGValue;
	}
	#[repr(C)]
	#[derive(Debug, Copy, Clone)]
	pub struct YGConfig {
		_unused: [u8; 0],
	}
	pub type YGConfigRef = *mut root::YGConfig;
	#[repr(C)]
	#[derive(Debug, Copy, Clone)]
	pub struct YGNode {
		_unused: [u8; 0],
	}
	pub type YGNodeRef = *mut root::YGNode;
	pub type YGMeasureFunc = ::std::option::Option<
		unsafe extern "C" fn(
			node: root::YGNodeRef,
			width: ::std::os::raw::c_float,
			widthMode: root::YGMeasureMode,
			height: ::std::os::raw::c_float,
			heightMode: root::YGMeasureMode,
		) -> root::YGSize,
	>;
	pub type YGBaselineFunc = ::std::option::Option<
		unsafe extern "C" fn(
			node: root::YGNodeRef,
			width: ::std::os::raw::c_float,
			height: ::std::os::raw::c_float,
		) -> ::std::os::raw::c_float,
	>;
	pub type YGDirtiedFunc = ::std::option::Option<unsafe extern "C" fn(node: root::YGNodeRef)>;
	pub type YGPrintFunc = ::std::option::Option<unsafe extern "C" fn(node: root::YGNodeRef)>;
	pub type YGLogger = ::std::option::Option<
		unsafe extern "C" fn(
			config: root::YGConfigRef,
			node: root::YGNodeRef,
			level: root::YGLogLevel,
			format: *const ::std::os::raw::c_char,
			args: *mut root::__va_list_tag,
		) -> ::std::os::raw::c_int,
	>;
	pub type YGCloneNodeFunc = ::std::option::Option<
		unsafe extern "C" fn(
			oldNode: root::YGNodeRef,
			owner: root::YGNodeRef,
			childIndex: ::std::os::raw::c_int,
		) -> root::YGNodeRef,
	>;
	extern "C" {
		pub fn YGNodeNew() -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeNewWithConfig(config: root::YGConfigRef) -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeClone(node: root::YGNodeRef) -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeFree(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeFreeRecursive(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeReset(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeGetInstanceCount() -> i32;
	}
	extern "C" {
		pub fn YGNodeInsertChild(node: root::YGNodeRef, child: root::YGNodeRef, index: u32);
	}
	extern "C" {
		pub fn YGNodeInsertSharedChild(node: root::YGNodeRef, child: root::YGNodeRef, index: u32);
	}
	extern "C" {
		pub fn YGNodeRemoveChild(node: root::YGNodeRef, child: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeRemoveAllChildren(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeGetChild(node: root::YGNodeRef, index: u32) -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeGetOwner(node: root::YGNodeRef) -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeGetParent(node: root::YGNodeRef) -> root::YGNodeRef;
	}
	extern "C" {
		pub fn YGNodeGetChildCount(node: root::YGNodeRef) -> u32;
	}
	extern "C" {
		pub fn YGNodeSetChildren(
			owner: root::YGNodeRef,
			children: *const root::YGNodeRef,
			count: u32,
		);
	}
	extern "C" {
		pub fn YGNodeCalculateLayout(
			node: root::YGNodeRef,
			availableWidth: ::std::os::raw::c_float,
			availableHeight: ::std::os::raw::c_float,
			ownerDirection: root::YGDirection,
		);
	}
	extern "C" {
		pub fn YGNodeMarkDirty(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeMarkDirtyAndPropogateToDescendants(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodePrint(node: root::YGNodeRef, options: root::YGPrintOptions);
	}
	extern "C" {
		pub fn YGFloatIsUndefined(value: ::std::os::raw::c_float) -> bool;
	}
	extern "C" {
		pub fn YGNodeCanUseCachedMeasurement(
			widthMode: root::YGMeasureMode,
			width: ::std::os::raw::c_float,
			heightMode: root::YGMeasureMode,
			height: ::std::os::raw::c_float,
			lastWidthMode: root::YGMeasureMode,
			lastWidth: ::std::os::raw::c_float,
			lastHeightMode: root::YGMeasureMode,
			lastHeight: ::std::os::raw::c_float,
			lastComputedWidth: ::std::os::raw::c_float,
			lastComputedHeight: ::std::os::raw::c_float,
			marginRow: ::std::os::raw::c_float,
			marginColumn: ::std::os::raw::c_float,
			config: root::YGConfigRef,
		) -> bool;
	}
	extern "C" {
		pub fn YGNodeCopyStyle(dstNode: root::YGNodeRef, srcNode: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeGetContext(node: root::YGNodeRef) -> *mut ::std::os::raw::c_void;
	}
	extern "C" {
		pub fn YGNodeSetContext(node: root::YGNodeRef, context: *mut ::std::os::raw::c_void);
	}
	extern "C" {
		pub fn YGConfigSetPrintTreeFlag(config: root::YGConfigRef, enabled: bool);
	}
	extern "C" {
		pub fn YGNodeGetMeasureFunc(node: root::YGNodeRef) -> root::YGMeasureFunc;
	}
	extern "C" {
		pub fn YGNodeSetMeasureFunc(node: root::YGNodeRef, measureFunc: root::YGMeasureFunc);
	}
	extern "C" {
		pub fn YGNodeGetBaselineFunc(node: root::YGNodeRef) -> root::YGBaselineFunc;
	}
	extern "C" {
		pub fn YGNodeSetBaselineFunc(node: root::YGNodeRef, baselineFunc: root::YGBaselineFunc);
	}
	extern "C" {
		pub fn YGNodeGetDirtiedFunc(node: root::YGNodeRef) -> root::YGDirtiedFunc;
	}
	extern "C" {
		pub fn YGNodeSetDirtiedFunc(node: root::YGNodeRef, dirtiedFunc: root::YGDirtiedFunc);
	}
	extern "C" {
		pub fn YGNodeGetPrintFunc(node: root::YGNodeRef) -> root::YGPrintFunc;
	}
	extern "C" {
		pub fn YGNodeSetPrintFunc(node: root::YGNodeRef, printFunc: root::YGPrintFunc);
	}
	extern "C" {
		pub fn YGNodeGetHasNewLayout(node: root::YGNodeRef) -> bool;
	}
	extern "C" {
		pub fn YGNodeSetHasNewLayout(node: root::YGNodeRef, hasNewLayout: bool);
	}
	extern "C" {
		pub fn YGNodeGetNodeType(node: root::YGNodeRef) -> root::YGNodeType;
	}
	extern "C" {
		pub fn YGNodeSetNodeType(node: root::YGNodeRef, nodeType: root::YGNodeType);
	}
	extern "C" {
		pub fn YGNodeIsDirty(node: root::YGNodeRef) -> bool;
	}
	extern "C" {
		pub fn YGNodeLayoutGetDidUseLegacyFlag(node: root::YGNodeRef) -> bool;
	}
	extern "C" {
		pub fn YGNodeStyleSetDirection(node: root::YGNodeRef, direction: root::YGDirection);
	}
	extern "C" {
		pub fn YGNodeStyleGetDirection(node: root::YGNodeRef) -> root::YGDirection;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexDirection(
			node: root::YGNodeRef,
			flexDirection: root::YGFlexDirection,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlexDirection(node: root::YGNodeRef) -> root::YGFlexDirection;
	}
	extern "C" {
		pub fn YGNodeStyleSetJustifyContent(node: root::YGNodeRef, justifyContent: root::YGJustify);
	}
	extern "C" {
		pub fn YGNodeStyleGetJustifyContent(node: root::YGNodeRef) -> root::YGJustify;
	}
	extern "C" {
		pub fn YGNodeStyleSetAlignContent(node: root::YGNodeRef, alignContent: root::YGAlign);
	}
	extern "C" {
		pub fn YGNodeStyleGetAlignContent(node: root::YGNodeRef) -> root::YGAlign;
	}
	extern "C" {
		pub fn YGNodeStyleSetAlignItems(node: root::YGNodeRef, alignItems: root::YGAlign);
	}
	extern "C" {
		pub fn YGNodeStyleGetAlignItems(node: root::YGNodeRef) -> root::YGAlign;
	}
	extern "C" {
		pub fn YGNodeStyleSetAlignSelf(node: root::YGNodeRef, alignSelf: root::YGAlign);
	}
	extern "C" {
		pub fn YGNodeStyleGetAlignSelf(node: root::YGNodeRef) -> root::YGAlign;
	}
	extern "C" {
		pub fn YGNodeStyleSetPositionType(
			node: root::YGNodeRef,
			positionType: root::YGPositionType,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetPositionType(node: root::YGNodeRef) -> root::YGPositionType;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexWrap(node: root::YGNodeRef, flexWrap: root::YGWrap);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlexWrap(node: root::YGNodeRef) -> root::YGWrap;
	}
	extern "C" {
		pub fn YGNodeStyleSetOverflow(node: root::YGNodeRef, overflow: root::YGOverflow);
	}
	extern "C" {
		pub fn YGNodeStyleGetOverflow(node: root::YGNodeRef) -> root::YGOverflow;
	}
	extern "C" {
		pub fn YGNodeStyleSetDisplay(node: root::YGNodeRef, display: root::YGDisplay);
	}
	extern "C" {
		pub fn YGNodeStyleGetDisplay(node: root::YGNodeRef) -> root::YGDisplay;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlex(node: root::YGNodeRef, flex: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlex(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexGrow(node: root::YGNodeRef, flexGrow: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlexGrow(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexShrink(node: root::YGNodeRef, flexShrink: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlexShrink(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexBasis(node: root::YGNodeRef, flexBasis: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexBasisPercent(
			node: root::YGNodeRef,
			flexBasis: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleSetFlexBasisAuto(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeStyleGetFlexBasis(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetPosition(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			position: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleSetPositionPercent(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			position: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetPosition(node: root::YGNodeRef, edge: root::YGEdge) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetMargin(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			margin: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleSetMarginPercent(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			margin: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleSetMarginAuto(node: root::YGNodeRef, edge: root::YGEdge);
	}
	extern "C" {
		pub fn YGNodeStyleGetMargin(node: root::YGNodeRef, edge: root::YGEdge) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetPadding(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			padding: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleSetPaddingPercent(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			padding: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetPadding(node: root::YGNodeRef, edge: root::YGEdge) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetBorder(
			node: root::YGNodeRef,
			edge: root::YGEdge,
			border: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetBorder(
			node: root::YGNodeRef,
			edge: root::YGEdge,
		) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeStyleSetWidth(node: root::YGNodeRef, width: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetWidthPercent(node: root::YGNodeRef, width: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetWidthAuto(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeStyleGetWidth(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetHeight(node: root::YGNodeRef, height: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetHeightPercent(node: root::YGNodeRef, height: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetHeightAuto(node: root::YGNodeRef);
	}
	extern "C" {
		pub fn YGNodeStyleGetHeight(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetMinWidth(node: root::YGNodeRef, minWidth: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetMinWidthPercent(
			node: root::YGNodeRef,
			minWidth: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetMinWidth(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetMinHeight(node: root::YGNodeRef, minHeight: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetMinHeightPercent(
			node: root::YGNodeRef,
			minHeight: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetMinHeight(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetMaxWidth(node: root::YGNodeRef, maxWidth: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetMaxWidthPercent(
			node: root::YGNodeRef,
			maxWidth: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetMaxWidth(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetMaxHeight(node: root::YGNodeRef, maxHeight: ::std::os::raw::c_float);
	}
	extern "C" {
		pub fn YGNodeStyleSetMaxHeightPercent(
			node: root::YGNodeRef,
			maxHeight: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetMaxHeight(node: root::YGNodeRef) -> root::YGValue;
	}
	extern "C" {
		pub fn YGNodeStyleSetAspectRatio(
			node: root::YGNodeRef,
			aspectRatio: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGNodeStyleGetAspectRatio(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetLeft(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetTop(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetRight(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetBottom(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetWidth(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetHeight(node: root::YGNodeRef) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetDirection(node: root::YGNodeRef) -> root::YGDirection;
	}
	extern "C" {
		pub fn YGNodeLayoutGetHadOverflow(node: root::YGNodeRef) -> bool;
	}
	extern "C" {
		pub fn YGNodeLayoutGetDidLegacyStretchFlagAffectLayout(node: root::YGNodeRef) -> bool;
	}
	extern "C" {
		pub fn YGNodeLayoutGetMargin(
			node: root::YGNodeRef,
			edge: root::YGEdge,
		) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetBorder(
			node: root::YGNodeRef,
			edge: root::YGEdge,
		) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGNodeLayoutGetPadding(
			node: root::YGNodeRef,
			edge: root::YGEdge,
		) -> ::std::os::raw::c_float;
	}
	extern "C" {
		pub fn YGConfigSetLogger(config: root::YGConfigRef, logger: root::YGLogger);
	}
	extern "C" {
		pub fn YGLog(
			node: root::YGNodeRef,
			level: root::YGLogLevel,
			message: *const ::std::os::raw::c_char,
			...
		);
	}
	extern "C" {
		pub fn YGLogWithConfig(
			config: root::YGConfigRef,
			level: root::YGLogLevel,
			format: *const ::std::os::raw::c_char,
			...
		);
	}
	extern "C" {
		pub fn YGAssert(condition: bool, message: *const ::std::os::raw::c_char);
	}
	extern "C" {
		pub fn YGAssertWithNode(
			node: root::YGNodeRef,
			condition: bool,
			message: *const ::std::os::raw::c_char,
		);
	}
	extern "C" {
		pub fn YGAssertWithConfig(
			config: root::YGConfigRef,
			condition: bool,
			message: *const ::std::os::raw::c_char,
		);
	}
	extern "C" {
		pub fn YGConfigSetPointScaleFactor(
			config: root::YGConfigRef,
			pixelsInPoint: ::std::os::raw::c_float,
		);
	}
	extern "C" {
		pub fn YGConfigSetShouldDiffLayoutWithoutLegacyStretchBehaviour(
			config: root::YGConfigRef,
			shouldDiffLayout: bool,
		);
	}
	extern "C" {
		pub fn YGConfigSetUseLegacyStretchBehaviour(
			config: root::YGConfigRef,
			useLegacyStretchBehaviour: bool,
		);
	}
	extern "C" {
		pub fn YGConfigNew() -> root::YGConfigRef;
	}
	extern "C" {
		pub fn YGConfigFree(config: root::YGConfigRef);
	}
	extern "C" {
		pub fn YGConfigCopy(dest: root::YGConfigRef, src: root::YGConfigRef);
	}
	extern "C" {
		pub fn YGConfigGetInstanceCount() -> i32;
	}
	extern "C" {
		pub fn YGConfigSetExperimentalFeatureEnabled(
			config: root::YGConfigRef,
			feature: root::YGExperimentalFeature,
			enabled: bool,
		);
	}
	extern "C" {
		pub fn YGConfigIsExperimentalFeatureEnabled(
			config: root::YGConfigRef,
			feature: root::YGExperimentalFeature,
		) -> bool;
	}
	extern "C" {
		pub fn YGConfigSetUseWebDefaults(config: root::YGConfigRef, enabled: bool);
	}
	extern "C" {
		pub fn YGConfigGetUseWebDefaults(config: root::YGConfigRef) -> bool;
	}
	extern "C" {
		pub fn YGConfigSetCloneNodeFunc(config: root::YGConfigRef, callback: root::YGCloneNodeFunc);
	}
	extern "C" {
		pub fn YGConfigGetDefault() -> root::YGConfigRef;
	}
	extern "C" {
		pub fn YGConfigSetContext(config: root::YGConfigRef, context: *mut ::std::os::raw::c_void);
	}
	extern "C" {
		pub fn YGConfigGetContext(config: root::YGConfigRef) -> *mut ::std::os::raw::c_void;
	}
	extern "C" {
		pub fn YGRoundValueToPixelGrid(
			value: ::std::os::raw::c_float,
			pointScaleFactor: ::std::os::raw::c_float,
			forceCeil: bool,
			forceFloor: bool,
		) -> ::std::os::raw::c_float;
	}
	pub type __builtin_va_list = [root::__va_list_tag; 1usize];
	#[repr(C)]
	#[derive(Debug, Copy, Clone)]
	pub struct __va_list_tag {
		pub gp_offset: ::std::os::raw::c_uint,
		pub fp_offset: ::std::os::raw::c_uint,
		pub overflow_arg_area: *mut ::std::os::raw::c_void,
		pub reg_save_area: *mut ::std::os::raw::c_void,
	}
}
